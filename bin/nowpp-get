#!/usr/bin/env python

#PBS -N nowpp-get
#PBS -P e14
#PBS -q copyq
#PBS -l walltime=10:00:00,mem=4GB,other=mdss
#PBS -l storage=scratch/e14+gdata/e14
#PBS -l wd

import sh
import os
import argparse
import nowpp.io as io
import sys

description = ("Download NOW outputs from the MDSS storage using a configuration file ")

parser = argparse.ArgumentParser(description=description)
parser.add_argument('config_file', nargs=1, help='Configuration file')
parser.add_argument('--nemo', action='store_true',
                    help='Download NEMO files')
parser.add_argument('--wrf', action='store_true',
                    help='Download WRF files')
parser.add_argument('--ystart', type=int,
                    help='Manually define the first year')
parser.add_argument('--ystop', type=int,
                    help='Manually define the last year')
args = parser.parse_args()

# Read NOW configuration as a global variable
cs = io.Cursor(args.config_file[0])

simulations = cs.cfg.get_simulations()
if args.ystart is None:
    ystart = cs.cfg.get_start_date().year
else:
    ystart = args.ystart
if args.ystop is None:
    ystop = cs.cfg.get_end_date().year
else:
    ystop = args.ystop

# TODO: Hard-coded variables to include in configuration file
domain = 1
nemo_grids = ['T', 'U', 'V']


if (not args.nemo) and (not args.wrf):
    print("You must select at least NEMO or WRF outputs to download")
    sys.exit(1)


for sim in simulations:
    for year in range(ystart, ystop + 1):
        if args.nemo:
            model = 'nemo'
            for grid in nemo_grids:
                print('Downloading  outputs (%s,grid %s, year %s)'
                      % (sim, grid, year))
                cs.sel(model=model, simulation=sim, grid=grid)
                basename = cs.cfg.get_basename(model, sim, 'raw', grid)
                mdss_project = cs.cfg.get_mdss_project(sim)
                mdss_path = cs.cfg.get_mdss_path(sim)
                dest = cs.cfg.get_path(model, sim, 'raw') + '/'

                origin = os.path.join(mdss_path, str(year), basename)
                sh.mkdir('-p', dest)
                sh.mdss('-P', mdss_project, 'get', origin, dest)
        if args.wrf:
            model = 'wrf'
            print('Downloading WRF outputs (%s, year %s)' % (sim, year))
            cs.sel(model=model, simulation=sim)
            basename = cs.cfg.get_basename(model, sim, 'raw', None)
            mdss_project = cs.cfg.get_mdss_project(sim)
            mdss_path = cs.cfg.get_mdss_path(sim)
            origin = os.path.join(mdss_path, str(year), basename)
            dest = cs.cfg.get_path(model, sim, 'raw') + '/'
            sh.mkdir('-p', dest)
            sh.mdss('-P', mdss_project, 'get', origin, dest)

